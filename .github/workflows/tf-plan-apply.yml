name: 'Terraform Plan/Apply'

on:
  #push:
    #branches:
    #- main
  #pull_request:
    #branches:
    #- main
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Trigger Terraform destroy'
        required: false
        default: 'false'

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  TF_WORKING_DIR: ./terraform

jobs:
  azure-login:
    name: 'Azure CLI Login'
    runs-on: ubuntu-latest
    outputs:
      client_id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
    - name: Azure CLI login
      id: azure-login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.destroy != 'true' }}
    needs: azure-login
    
    environment: UKADV

    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Cache Terraform state and dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.TF_WORKING_DIR }}/.terraform
          ${{ env.TF_WORKING_DIR }}/.terraform.lock.hcl
          ${{ env.TF_WORKING_DIR }}/tfplan
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf*') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform init

    - name: Terraform Format
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform fmt -check

    - name: Terraform Plan
      id: tf-plan
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ${{ env.TF_WORKING_DIR }}/tfplan

    - name: Create String Output
      id: tf-plan-string
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const body = `${process.env.SUMMARY}`;
          github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
          })

  terraform-apply:

    environment: UKADV

    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    needs: [azure-login, terraform-plan]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Cache Terraform state and dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.TF_WORKING_DIR }}/.terraform
          ${{ env.TF_WORKING_DIR }}/.terraform.lock.hcl
          ${{ env.TF_WORKING_DIR }}/tfplan
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf*') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform apply -auto-approve tfplan

  terraform-destroy:

    environment: UKADV

    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: azure-login

    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Terraform Destroy
      id: destroy
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform destroy -no-color --auto-approve
